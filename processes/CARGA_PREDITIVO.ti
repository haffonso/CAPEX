#region Prolog

#****Begin: Generated Statements***
#****End: Generated Statements****


# ===============================================================================================================
#GENERALCOMMENT             Descrição:          	Carrega dados CSV para o Cubo ACO.200.Despesas
#GENERALCOMMENT             Responsável:   	Rodrigo Mendonça
#GENERALCOMMENT             Data Criação:    	Fevereiro/2020
#
#LASTCHANGE                 Alterações:
#LASTCHANGE                 Responsavel Alterações:
# ===============================================================================================================

# ===============================================================================================================
#PROLOGCOMMENT               Descrição:            Define arquivo fonte utlizando como filtro Parametros de Versão, Ano e Mês.
# ===============================================================================================================

# =================================================================================
# 									Glosário 
# =================================================================================
# Prefixos de Variáveis 
#
# v - Variáveis de entrada		- relacionado a origem de dados do turbo
# p - Parâmetros de entrada		- relacionado ao input realizado pelo usuário no momento de disparo do processo
# c - Constantes			- variáveis que receberão um valor fixo (Não serão alteradas durante o processo)
# n - Numerica
# s - String (Texto)
#
# Variáveis que deverão ser alteradas
# cCuboDestino			- Armazena o nome do cubo de destino
# cSuprimirConsolidado		- (S/N) - Suprimir a informação dos elementos consolidados
# cSuprimirZero			- (S/N) - Suprimir os valores 0 da view
# cSuprimirCamposCalculados		- (S/N) - Suprimir os campos calculados 
# cViewTemporaria			- (S/N) - Se a view deve ser temporária 
#
#
# Variáveis configuradas no cubo de controle 
# cCaminhoArquivoFonte 		- Busca o caminho de origem do processo no cubo de controle
# cCaminhoArquivoRejeitado 		- Busca o caminho de rejeitado do processo no cubo de controle
# cPrefixoArquivoFonte 		- Busca o prefixo do arquivo de origem do processo no cubo de controle
# cUtilizarDebug		 	- Busca no cubo de controle se ao executar o processo, será utilizado o modo Debug (Grava em arquivo texto o que seria gravado no cubo)
# cGravarLogAlteracao		- Busca no cubo de controle se ao executar o processo, serão gravados as alterações no cubo de destino
#
#
# Variáveis que não precisam ser alteradas
# cCuboParametro 			- Armazena o nome do cubo de parâmetro utilizado
# cCuboPropriedade		- Armazena o nome do cubo de sistema onde estão as principais propriedades dos cubos
# cExisteCabecalhoRejeitado		- Variável que irá controlar o cabeçalho do arquivo de rejeitado sejá criado uma única vez
# cExisteRegistroRejeitado 		- Variável que irá controlar se o registro possuí algum erro de integridade ou validação dos dados
# cHorarioInicio			- Armazena o horário de inicio do processo
# cMensagemRegistro		- Armazena a mensagem de erro/log do registro
# cMensagemProcesso		- Armazena a mensagem de erro do processo
# cProcesso			- Armazena o nome do processo
# cQtdRegistroRejeitado		- Contador de registros rejeitados
# cTipoErro			- Controla o tipo de erro (Erro 1 - Prologo / Erro 2 - Dados)
# cUsuario			- Armazena o nome do usuário ou chore que executou o processo

# =================================================================================
# Variáveis do padrão CTI que devem ser alteradas
# =================================================================================


# Informações do cubo de Destino
# ========================================
cCuboDestino		= 'Revenue';



# =================================================================================
# Variáveis do padrão CTI não devem ser alteradas
# =================================================================================

# Recupera o usuário que executou o processo
# ========================================
cUsuario = IF( DimIx( '}Clients' , TM1User() ) = 0, 'Executed by Chore' , ATTRS('}Clients', TM1User(), '}TM1_DefaultDisplayValue') );
  

  
# Variáveis de controle do processo
# ========================================
cCuboParametro			= 'SYS.150.Controle_Cargas';
cCuboPropriedade			= '}CubeProperties';
cHorarioInicio			= Now();
cProcesso			= GetProcessName();
cMensagemRegistro	 	= '';
cMensagemProcesso 		= '';
cExisteRegistroRejeitado 		= 0;
cExisteCabecalhoRejeitado 		= 0;
cQtdRegistroRejeitado		= 0;
cTipoErro				= 0;
cContadorRegistro 			= 0;



# Variáveis do cubo de controle
# ========================================
cCaminhoArquivoFonte 		= CellGetS( cCuboParametro , cProcesso , 'Caminho do Arquivo Fonte' );
cCaminhoArquivoRejeitado  		= CellGetS( cCuboParametro , cProcesso , 'Caminho do Arquivo de Rejeitado' );
cPrefixoArquivoFonte 		= CellGetS( cCuboParametro , cProcesso , 'Prefixo do Arquivo' );
cUtilizarDebug		 	= CellGetS( cCuboParametro , cProcesso , 'Debug (S/N)' );
cGravarLogAlteracao		= CellGetS( cCuboParametro , cProcesso , 'Gerar Log de Alteração (S/N)' );



# Tratamento para os campos vindos do cubo de controle que recebem (S/N)
# ========================================
cUtilizarDebug		 	= IF( cUtilizarDebug @= 'S' , 'S' , 'N' );
cGravarLogAlteracao		= IF( cGravarLogAlteracao @= 'S' , 'S' , 'N' );




# =================================================================================
# Define variáveis locais de arquivo
# =================================================================================
cDelimitadorArquivo 		= ';';
cSeparadorMilhar			= '.';
cSeparadorDecimal			= ',';

DataSourceASCIIDelimiter 		= cDelimitadorArquivo;
DataSourceASCIIThousandSeparator 	= cSeparadorMilhar;
DataSourceASCIIDecimalSeparator 	= cSeparadorDecimal;
DataSourceQuoteCharacter 		= '';


# =================================================================================
# Define o Log inicial da carga como falha
# Registra esse log logo no inicio para garantir que tenha algum log de falha registrado
# Caso o processo não consiga chegar no próximo registro de log por alguma falha inesperada
# =================================================================================
cMensagemProcesso	= 'Processo com falha, contate o administrador para verificar os logs de erro do sistema' ;
s01			= TimSt( cHorarioInicio , '\Y-\m-\d \hh\im\ss' );
s02 			= cUsuario ;
s03 			= cMensagemProcesso ;
s04 			= '0' ;
s05 			= TimSt( cHorarioInicio - Now, '\Y-\m-\d \hh\im\ss' );

CellPutS( s01 , cCuboParametro, cProcesso, 'DataHora Inicio' );
CellPutS( s01 , cCuboParametro, cProcesso, 'DataHora Fim' );
CellPutS( s02 , cCuboParametro, cProcesso, 'Usuário' );
CellPutS( s03 , cCuboParametro, cProcesso, 'Mensagem de Log' );
CellPutS( s04 , cCuboParametro, cProcesso, 'Registros Processados' );
CellPutS( s05 , cCuboParametro, cProcesso, 'Tempo de Execução' );



# =================================================================================
# Validação dos parâmetros
# Teste 1 - O parâmetro só será validado caso exista uma dimensão atrelada
# Teste 2 - Parâmetro não informado
# Teste 3 - Se o parâmetro informado existe na dimensão de validação
# =================================================================================



# Parâmetro 1
# =========================
sDim = 'Year';
sElm = pAno;

If( Trim( sDim ) @<> '' );
  If( Trim( sElm ) @= '' );
    cTipoErro = 1;
    DataSourceType = 'NULL';
    cMensagemProcesso = 'O parâmetro    [ ' | sDim | ' ]    não foi Informado' ;
    ItemReject( cMensagemProcesso );
  ElseIf( DimIx( sDim , sElm ) = 0 );
    cTipoErro = 1;
    DataSourceType = 'NULL';
    cMensagemProcesso = 'O elemento    [ ' | sElm | ' ]    não existe na dimensão    [ ' | sDim | ' ]';
    ItemReject( cMensagemProcesso );
  EndIf;
EndIf;





# Parâmetro 3
# =========================
sDim = 'Version';
sElm = pVersao;

If( Trim( sDim ) @<> '' );
  If( Trim( sElm ) @= '' );
    cTipoErro = 1;
    DataSourceType = 'NULL';
    cMensagemProcesso = 'O parâmetro    [ ' | sDim | ' ]    não foi Informado' ;
    ItemReject( cMensagemProcesso );
  ElseIf( DimIx( sDim , sElm ) = 0 );
    cTipoErro = 1;
    DataSourceType = 'NULL';
    cMensagemProcesso = 'O elemento    [ ' | sElm | ' ]    não existe na dimensão    [ ' | sDim | ' ]';
    ItemReject( cMensagemProcesso );
  EndIf;
EndIf;



# =================================================================================
# Validação do arquivo de origem e pasta
# Teste 1 - Se o caminho do arquivo fonte foi preenchido no cubo de controle
# Teste 2 - Se o caminho do arquivo rejeitado foi preenchido no cubo de controle
# Teste 3 - Se o diretório do arquivo fonte existir
# Teste 4 - Se o diretório do arquivo de rejeitado/debug existir
# Teste 5 - Se o arquivo fonte existe na pasta informada
# =================================================================================


# Define o nome dos arquivos
# ======================================================
sPrefixo			= pArquivo;
cSufixoRejeitado		= IF( cUtilizarDebug @= 'S' , 'Debug' , 'Reject' );

cNomeArquivoFonte	=  sPrefixo 

| '.csv';
  
cNomeArquivoRejeitado	=  sPrefixo 
| '_' | cSufixoRejeitado | '.csv';



# Aborta o processo se o caminho do arquivo fonte não foi informado
# ======================================================
IF( cCaminhoArquivoFonte @= '' );
   cTipoErro = 1;
   cMensagemProcesso = 'O caminho onde esta o arquivo fonte não foi informado, informe no cubo:   "' | cCuboParametro | '"' ;
   DataSourceType = 'NULL';
   ItemReject( cMensagemProcesso );
ENDIF;



# Aborta o processo se o caminho do arquivo reject não foi informado
# ======================================================
IF( cCaminhoArquivoRejeitado  @= '' );
   cTipoErro = 1;
   cMensagemProcesso = 'O caminho onde deverá ser salvo o arquivo com registros rejeitados não foi informado, informe no cubo:   "' | cCuboParametro | '"' ;
   DataSourceType = 'NULL';
   ItemReject( cMensagemProcesso );
ENDIF;



# Insere o caractere "\" no final do caminho caso ainda não tenha
# ======================================================
cCaminhoArquivoFonte 	= IF( SUBST( cCaminhoArquivoFonte , LONG( cCaminhoArquivoFonte ) , 1 ) @<> '\' , cCaminhoArquivoFonte | '\' , cCaminhoArquivoFonte ); 
cCaminhoArquivoRejeitado  	= IF( SUBST( cCaminhoArquivoRejeitado  , LONG( cCaminhoArquivoRejeitado  ) , 1 ) @<> '\' , cCaminhoArquivoRejeitado  | '\' , cCaminhoArquivoRejeitado  );



# Aborta o processo se o diretorio do arquivo fonte não existir
# ======================================================
IF( FileExists( cCaminhoArquivoFonte ) = 0 );
   cTipoErro = 1;
   cMensagemProcesso = 'O diretório especificado para o arquivo fonte  "' | cCaminhoArquivoFonte | '"   não existe, informe no cubo:   "' | cCuboParametro | '"' ;
   DataSourceType = 'NULL';
   ItemReject( cMensagemProcesso );
ENDIF;



# Aborta o processo se o diretorio dos arquivos rejeitados não existir
# ======================================================
IF( FileExists( cCaminhoArquivoRejeitado) = 0 );
   cTipoErro = 1;
   cMensagemProcesso = 'O diretório especificado para o arquivo com registros rejeitados  "' | cCaminhoArquivoRejeitado | '"   não existe, informe no cubo:   "' | cCuboParametro | '"' ;
   DataSourceType = 'NULL';
   ItemReject( cMensagemProcesso );
ENDIF;



# Monta o caminho completo 
# ======================================================
cNomeArquivoFonteCompleto 	= cCaminhoArquivoFonte | cNomeArquivoFonte;
cNomeArquivoRejeitadoCompleto	= cCaminhoArquivoRejeitado | cNomeArquivoRejeitado;



# Aborta o processo se o arquivo fonte não existir na pasta de origem
# ======================================================
IF( FileExists( cNomeArquivoFonteCompleto ) = 0 );
   cTipoErro = 1;
   cMensagemProcesso = 'O arquivo   "' | cNomeArquivoFonte | '"   não existe no diretorio:   "' | cCaminhoArquivoFonte | '"' ;
   DataSourceType = 'NULL';
   ItemReject( cMensagemProcesso );
ENDIF;



# Apaga o arquivo de reject caso exista
# ======================================================
IF( FileExists( cNomeArquivoRejeitadoCompleto ) = 1 );
   ASCIIDelete( cNomeArquivoRejeitadoCompleto );
ENDIF;



# =================================================================================
#
# Definição da Origem de Dados
#
# =================================================================================

# Define o arquivo fonte como a nova fonte de dados deste processo
# ======================================================

DatasourceNameForServer		= cNomeArquivoFonteCompleto ;
DatasourceNameForClient		= cNomeArquivoFonteCompleto ;



# =================================================================================
#
# Definição View de Limpeza do Cudo de Destino
#
# =================================================================================

cSuprimirConsolidado	= 'S';
cSuprimirZero		= 'S'; 
cSuprimirCamposCalculados	= 'S';
cViewTemporaria	 	= 'S';
nViewTemporaria		= If( cViewTemporaria @= 'S', 1, 0);



# Busca parametro para ativação de Log do Cubo
# ======================================================
sLog       	= IF ( cGravarLogAlteracao @= 'N', 'NO', 'YES' );



# Grava no cubo de Log
# ======================================================
CellPutS( sLog, cCuboPropriedade, cCuboDestino, 'LOGGING' );



# Define nome da view e subset de limpeza
# ======================================================
cViewDestino	= 'processo.' | cProcesso | '.' | 'Limpeza' | '.' | TimSt( cHorarioInicio, '\Y-\m-\d \hh\im\ss' );
cSubsetDestino	= cViewDestino;



# Cria a view que será utilizada para a limpeza
# ======================================================
ViewCreate( cCuboDestino , cViewDestino , nViewTemporaria );



# Cria os subsets que serão utilizados para filtrar a view de limpeza
# ======================================================

cDimensao	= 'Year';
cElemento	= pAno;
If( cDimensao @<> '');
  SubsetCreate( cDimensao, cSubsetDestino , nViewTemporaria );  
  ViewSubsetAssign( cCuboDestino , cViewDestino, cDimensao , cSubsetDestino );  
  SubsetElementInsert( cDimensao, cSubsetDestino, cElemento	, 1 );
EndIf;





cDimensao	= 'Version';
cElemento	= pVersao;
If( cDimensao @<> '');
  SubsetCreate( cDimensao, cSubsetDestino , nViewTemporaria );  
  ViewSubsetAssign( cCuboDestino , cViewDestino, cDimensao , cSubsetDestino );  
  SubsetElementInsert( cDimensao, cSubsetDestino, cElemento	, 1 );
EndIf;

cDimensao	= 'Revenue';
cElemento	= 'Units Sold';
If( cDimensao @<> '');
  SubsetCreate( cDimensao, cSubsetDestino , nViewTemporaria );  
  ViewSubsetAssign( cCuboDestino , cViewDestino, cDimensao , cSubsetDestino );  
  SubsetElementInsert( cDimensao, cSubsetDestino, cElemento	, 1 );
EndIf;


# Cria os subsets a partir de MDX
# ======================================================
cDimensao	= '';
cMDX		= '';
If( cDimensao @<> '');
  SubsetCreatebyMDX(cSubsetDestino, cMDX, nViewTemporaria);
  ViewSubsetAssign( cCuboDestino , cViewDestino, cDimensao , cSubsetDestino );  
  SubsetMDXSet(cDimensao, cSubsetDestino, '');
EndIf;



# Configuração da View
# ======================================================
ViewExtractSkipCalcsSet( cCuboDestino, cViewDestino, If( cSuprimirConsolidado @= 'S', 1, 0) );
ViewExtractSkipZeroesSet( cCuboDestino, cViewDestino, If( cSuprimirZero @= 'S', 1, 0)  );
ViewExtractSkipRuleValuesSet( cCuboDestino, cViewDestino, If( cSuprimirCamposCalculados @= 'S', 1, 0) );



# Apaga os valores da View criada
# ======================================================
ViewZeroOut( cCuboDestino , cViewDestino );

#endregion
#region Metadata

#****Begin: Generated Statements***
#****End: Generated Statements****
#endregion
#region Data

#****Begin: Generated Statements***
#****End: Generated Statements****


# ===============================================================================================================
#DATACOMMENT        Descrição:  Grava dados no cubo
# ===============================================================================================================

# ===================================================================================
# Gera contador para o arquivo de debug ou registros rejeitados o e quantid. total de registros processados
# ===================================================================================
cContadorRegistro = cContadorRegistro + 1;
sContadorRegistro = NumberToString( cContadorRegistro );


# ===================================================================================
# Retira os espaços em branco das variáveis
# ===================================================================================




# ===================================================================================
# Trata as variáveis de valor
# ===================================================================================
vJan = If ( Trim (Jan) @= '-', '0', Trim (Jan) );
vFev = If ( Trim (Fev) @= '-', '0', Trim (Fev) );
vMar = If ( Trim (Mar) @= '-', '0', Trim (Mar) );
vAbr = If ( Trim (Abr) @= '-', '0', Trim (Abr) );
vMai = If ( Trim (Mai) @= '-', '0', Trim (Mai) );
vJun = If ( Trim (Jun) @= '-', '0', Trim (Jun) );
vJul = If ( Trim (Jul) @= '-', '0', Trim (Jul) );
vAGo = If ( Trim (Ago) @= '-', '0', Trim (Ago) );
vSet = If ( Trim (SEt) @= '-', '0', Trim (Set) );
vOut = If ( Trim (Out) @= '-', '0', Trim (Out) );
vNov = If ( Trim (Nov) @= '-', '0', Trim (Nov) );
vDez = If ( Trim (Dez) @= '-', '0', Trim (Dez) );

# ===================================================================================
# Pula o Registro se todas as variáveis estiverem vazias

# ===================================================================================
# Força 2 digitos na variável vMes
# ===================================================================================


# ===================================================================================
# Marca o registro para rejeitar 
# Caso a variavel estiver em branco, se não existir na dimensão ou se for um totalizador
# ===================================================================================
sDim	= 'Year';
sElm	= PAno;
sCol	= 'Ano';

If( cExisteRegistroRejeitado = 0 );
   If( sElm @= '' );
      cMensagemRegistro = 'A coluna    [ ' | sCol | ' ]    está em branco e é obrigatório ter algum valor';
      cExisteRegistroRejeitado = 1;
   ElseIf( DimIx( sDim , sElm ) = 0 );
      cMensagemRegistro = 'A coluna    [ ' | sCol | ' ]    contêm o valor:    [ ' | sElm | ' ]    que não existe na dimensão:    [ ' | sDim | ' ]';
      cExisteRegistroRejeitado = 1;
   ElseIf( dType( sDim , sElm ) @= 'C' );
      cMensagemRegistro = 'A coluna    [ ' | sCol | ' ]    contêm o valor:    [ ' | sElm | ' ]    que é um totalizador na dimensão:    [ ' | sDim | ' ]    totalizadores não podem receber carga';
      cExisteRegistroRejeitado = 1;
   EndIf;
EndIf;






















# ===================================================================================
# Marca o registro para rejeitar 
# Caso contenha algum caractere de texto na variavel numérica
# ===================================================================================
sElm	= vJan;
sCol	= 'Jan';

If( cExisteRegistroRejeitado = 0 );
  MxChar = long( sElm );
  ixChar = 1;
  fail = 0;
  While ( ixChar <= mxChar   &   fail = 0 );
    testASCII = Code( sElm , ixChar );
    #Se o código Ascii estiver fora do intervalo 48 a 57 (0-10) e for diferente de 44(.) e diferente 46(,)  existem caracteres de string
    If ( ~ ( testASCII >= 48   &   testASCII <= 57 )   &   testASCII <> 44   &   testASCII <> 46   &   testASCII <> 45 ) ; 
      cExisteRegistroRejeitado = 1;
      cMensagemRegistro = 'A coluna    [ ' | sCol | ' ]    contêm o caractere de texto:    [ ' | Subst( sElm, ixChar, 1)  | ' ]    esta coluna deve conter apenas valores numéricos';
      fail = 1;
    endif;
    ixChar = ixChar + 1;
  End;
EndIf;






# ===================================================================================
# Marca o registro para rejeitar 
# Verifica se o registro está duplicado no arquivo ( OPCIONAL )
# ===================================================================================
#If( cExisteRegistroRejeitado = 0 );
#  nDuplic = CellGetN( cCuboDestino, vAno, vMes, vVersao, vConta, vCCusto, 'Valor Despesas' );
#   If (nDuplic <> 0);
#      cExisteRegistroRejeitado = 1;
#      cMensagemRegistro = 'Registro duplicado no arquivo fonte.';
#   EndIf;
#EndIf;



# ===================================================================================
# DEBUG ou REJEIÇÃO
# Registra em arquivo os registros
# ===================================================================================
If( cExisteRegistroRejeitado = 1  %  cUtilizarDebug @= 'S' );


  # Escreve o cabeçalho do arquivo de registros rejeitados
  # =================================================================================
  If( cExisteCabecalhoRejeitado = 0);
    AsciiOutput( cNomeArquivoRejeitadoCompleto , 'Ano' , 'Mes' , 'Versao' , 'Conta' , 'CCusto' , 'Valor' , 'Num. Registro' , 'Mensagem de Erro');
    cExisteCabecalhoRejeitado = 1;
    cTipoErro = 2;
    If( cUtilizarDebug @= 'S'  );
      cMensagemProcesso = ' Processo concluido com registros salvos no arquivo de Debug, verificar o arquivo:    ' | cNomeArquivoRejeitadoCompleto;
    EndIf;
  EndIf;


  # Escreve o registro no arquivo de debug ou rejeitados
  # =================================================================================
  #AsciiOutput( cNomeArquivoRejeitadoCompleto , pAno , pVersao ,SKU , BU , vjan , sContadorRegistro , cMensagemRegistro );


  # Limpa as variaveis e pula o registro
  # ============================
  IF( cExisteRegistroRejeitado = 1 );
     cExisteRegistroRejeitado = 0;
     cMensagemRegistro = '';
     cMensagemProcesso = ' Processo concluido com registros rejeitados, verificar o arquivo:    ' | cNomeArquivoRejeitadoCompleto;
     ItemSkip;
  EndIf;

EndIf;



# ===================================================================================
# Grava os dados no cubo
# ===================================================================================
s01 = Empresa ;
s02 = Canal;
s03 = SKU;
s04 = '01';
s05 = pAno; 
s06 = pVersao ;
s07 = 'Units Sold' ;

sVal = vJan;

n01 = StringToNumberEx( sVal, cSeparadorDecimal, cSeparadorMilhar );
CellIncrementN( n01, cCuboDestino, s01, s02, s03, '01', s05, s06,s07 );

sVal = vFev;
n01 = StringToNumberEx( sVal, cSeparadorDecimal, cSeparadorMilhar );
CellIncrementN( n01, cCuboDestino, s01, s02, s03, '02', s05, s06,s07 );

sVal = vMar;
n01 = StringToNumberEx( sVal, cSeparadorDecimal, cSeparadorMilhar );
CellIncrementN( n01, cCuboDestino, s01, s02, s03, '03', s05, s06,s07 );

sVal = vAbr;
n01 = StringToNumberEx( sVal, cSeparadorDecimal, cSeparadorMilhar );
CellIncrementN( n01, cCuboDestino, s01, s02, s03, '04', s05, s06,s07 );


sVal = vMai;
n01 = StringToNumberEx( sVal, cSeparadorDecimal, cSeparadorMilhar );
CellIncrementN( n01, cCuboDestino, s01, s02, s03, '05', s05, s06,s07 );

sVal = vJun;
n01 = StringToNumberEx( sVal, cSeparadorDecimal, cSeparadorMilhar );
CellIncrementN( n01, cCuboDestino, s01, s02, s03, '06', s05, s06,s07 );

sVal = vJul;
n01 = StringToNumberEx( sVal, cSeparadorDecimal, cSeparadorMilhar );
CellIncrementN( n01, cCuboDestino, s01, s02, s03, '07', s05, s06,s07 );

sVal = vAgo;
n01 = StringToNumberEx( sVal, cSeparadorDecimal, cSeparadorMilhar );
CellIncrementN( n01, cCuboDestino, s01, s02, s03, '08', s05, s06,s07 );

sVal = vSet;
n01 = StringToNumberEx( sVal, cSeparadorDecimal, cSeparadorMilhar );
CellIncrementN( n01, cCuboDestino, s01, s02, s03, '09', s05, s06,s07 );

sVal = vOut;
n01 = StringToNumberEx( sVal, cSeparadorDecimal, cSeparadorMilhar );
CellIncrementN( n01, cCuboDestino, s01, s02, s03, '10', s05, s06,s07 );

sVal = vNov;
n01 = StringToNumberEx( sVal, cSeparadorDecimal, cSeparadorMilhar );
CellIncrementN( n01, cCuboDestino, s01, s02, s03, '11', s05, s06,s07 );

sVal = vDez;
n01 = StringToNumberEx( sVal, cSeparadorDecimal, cSeparadorMilhar );
CellIncrementN( n01, cCuboDestino, s01, s02, s03, '12', s05, s06,s07 );


# ( OPCIONAL )
# Caso o arquivo não possa ter registros duplicados 
# CellPutN( n01, cCuboDestino, s01, s02, s03, s04, s05, s06 );
#endregion
#region Epilog

#****Begin: Generated Statements***
#****End: Generated Statements****


# ===============================================================================================================
#EPILOGCOMMENT        Descrição:  Habilita log do cubo de destino, realiza CubeSaveData e registra log de status do processo.
# ===============================================================================================================

# =================================================================================
# Habilita o Log e salva dados no cubo
# =================================================================================
CellPutS ( 'YES', cCuboPropriedade, cCuboDestino, 'LOGGING' );
CubeSaveData ( cCuboDestino );


# =================================================================================
# Registra o Log de Erro ou Sucesso no Cubo de Controle
# =================================================================================
If( cTipoErro = 0 );
   cMensagemProcesso  = ' Processo concluído com sucesso';
EndIf;


s01	  = TimSt( cHorarioInicio , '\Y-\m-\d \hh\im\ss' );
s02 	= cUsuario ;
s03 	= cMensagemProcesso ;
s04 	= sContadorRegistro  ;
s05 	= TimSt( Now - cHorarioInicio, ' \h:\i:\s') ;

CellPutS( s01 , cCuboParametro, cProcesso, 'DataHora Fim' );
CellPutS( s02 , cCuboParametro, cProcesso, 'Usuário' );
CellPutS( s03 , cCuboParametro, cProcesso, 'Mensagem de Log' );
CellPutS( s04 , cCuboParametro, cProcesso, 'Registros Processados' );
CellPutS( s05 , cCuboParametro, cProcesso, 'Tempo de Execução' );


If( cTipoErro = 2 );
  ItemReject( cMensagemProcesso );
EndIf;
#endregion